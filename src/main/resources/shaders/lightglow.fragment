
#version 120
// Light scattering implementation by Toni Sagrista

#ifdef GL_ES
precision mediump float;
precision mediump int;
#endif

#define N 30

uniform sampler2D u_texture0;
// Glow texture
uniform sampler2D u_texture1;
uniform vec2 u_viewport;
uniform int u_nSamples;
uniform float u_textureScale;

varying vec2 v_texCoords;

uniform vec2 u_lightPositions[N];
uniform float u_lightViewAngles[N];
uniform vec3 u_lightColors[N];

uniform int u_nLights;

float len(vec2 vect, float ar){
	return sqrt(vect.x * vect.x * ar * ar + vect.y * vect.y);
}

// Computes luminance of rgba color
float luminance(vec4 color){
	return (0.299 * color.r + 0.587 * color.g + 0.114 * color.b) * color.a;
}

float average(vec4 color){
	return (color.r + color.g + color.b) / 3.0;
}

float fx(float t, float a){
	return a * t * cos(t);
}

float fy(float t, float a){
	return a * t * sin(t);
}

void main()
{
	 float ar = u_viewport.x / u_viewport.y;
	 gl_FragColor = vec4(0.0);

	 for (int li = 0; li < u_nLights; li++){
	 	 float viewAngle = min(0.0001, u_lightViewAngles[li]);
	 	 vec3 lightColor = u_lightColors[li];
	 	 // Size of sampling spiral
		 float a = viewAngle * 2.0;
		 
		 // Archimedes's spiral (fx = a*t*cos(t), fy = a*t*sin(t)) sampling from 0 to 6*Pi
		 float t = 0;
		 float dt = 6.0 * 3.14159 / u_nSamples;
		 
		 float lum = 0.0;
		 for(int idx = 1; idx < u_nSamples; idx++){
		 	lum += (texture2D(u_texture0, u_lightPositions[li] + vec2(fx(t, a) / ar, fy(t, a)))).r;
		 	t += dt;
		 }
		 
		 vec4 star_color = texture2D(u_texture0, u_lightPositions[li] + vec2(fx(t, a) / ar, fy(t, a) * ar));
		 lum += star_color.r;
		 lum /= u_nSamples;

		 float size = u_textureScale * min(1.6, viewAngle * 500000) * lum;
		 
		 vec2 glow_tc = (v_texCoords - u_lightPositions[li]);
		 glow_tc.x *= ar;
		 float dist_center = length(glow_tc);
		 glow_tc /= size;
		 glow_tc += 0.5;
		 
		 float color_glow = clamp(average(texture2D(u_texture1, glow_tc)), 0.0, 1.0);
		 float core_inc = (0.1 - min(0.1, dist_center)) * color_glow;
		 gl_FragColor += vec4(color_glow * lightColor.r + core_inc, color_glow * lightColor.g + core_inc, color_glow * lightColor.b + core_inc, 1.0);
	 }
}
